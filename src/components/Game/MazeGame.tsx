import React, { useCallback, useEffect, useRef, useState } from 'react';
import { GameCanvas } from './GameCanvas';
import { GameStats } from '../UI/GameStats';
import { GameControls } from '../UI/GameControls';
import { PlayerNameInput } from '../UI/PlayerNameInput';
import { Leaderboard } from '../UI/Leaderboard';
import { useGameState, useKeyboard, useGameLoop, useSound, useBackgroundMusic } from '../../hooks';
import { renderGame, calculateCellSize } from '../../utils';
import { addLeaderboardEntry } from '../../utils/leaderboard';
import type { CanvasContext, Size } from '../../types';

interface MazeGameProps {
  width?: number;
  height?: number;
}

export const MazeGame: React.FC<MazeGameProps> = ({ 
  width = 800, 
  height = 500 
}) => {
  const { gameState, movePlayer, togglePause, resetGame } = useGameState({
    mazeWidth: 24,
    mazeHeight: 18
  });

  const canvasCtxRef = useRef<CanvasContext | null>(null);
  const prevGameStatusRef = useRef(gameState.gameStatus);
  const [canvasSize, setCanvasSize] = useState<Size>({ width, height });
  const [showStartScreen, setShowStartScreen] = useState(true);
  const [showNameInput, setShowNameInput] = useState(false);
  const [playerName, setPlayerName] = useState('');
  const [savedTime, setSavedTime] = useState<number | undefined>(undefined);
  
  // –ó–≤—É–∫–æ–≤—ñ –µ—Ñ–µ–∫—Ç–∏
  const { playSound, toggleMute, isMuted } = useSound({
    volume: 0.8,
    enabled: true
  });

  // –§–æ–Ω–æ–≤–∞ –º—É–∑–∏–∫–∞ —É —Å—Ç–∏–ª—ñ 90-—Ö
  const { 
    startMusic, 
    pauseMusic, 
    toggleMute: toggleMusicMute, 
    isPlaying: isMusicPlaying,
    isMuted: isMusicMuted 
  } = useBackgroundMusic({
    volume: 0.25,
    enabled: true
  });

  // –û–±–≥–æ—Ä—Ç–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ–π –∑—ñ –∑–≤—É–∫–∞–º–∏
  const handleMove = useCallback((direction: typeof gameState.player.direction) => {
    movePlayer(direction);
    playSound('move');
  }, [movePlayer, playSound, gameState]);

  const handleTogglePause = useCallback(() => {
    togglePause();
    playSound('pause');
    
    // –ü—Ä–∏–∑—É–ø–∏–Ω–∏—Ç–∏/–≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –º—É–∑–∏–∫—É –ø—Ä–∏ –ø–∞—É–∑—ñ
    if (gameState.gameStatus === 'playing') {
      pauseMusic();
    } else if (gameState.gameStatus === 'paused') {
      startMusic();
    }
  }, [togglePause, playSound, gameState.gameStatus, pauseMusic, startMusic]);

  const handleReset = useCallback(() => {
    resetGame();
    playSound('start');
    // –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º—É–∑–∏–∫—É –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç—ñ
    if (!isMusicPlaying) {
      startMusic();
    }
  }, [resetGame, playSound, isMusicPlaying, startMusic]);

  // –û–±—Ä–æ–±–∫–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–Ω–æ–≥–æ –≤–≤–æ–¥—É (–≤–∏–º–∫–Ω–µ–Ω–æ –ø–æ–∫–∏ –Ω–µ –≤–≤–µ–¥–µ–Ω–æ —ñ–º'—è)
  useKeyboard({
    onMove: handleMove,
    onPause: handleTogglePause,
    onReset: handleReset,
    enabled: !showStartScreen && !showNameInput && gameState.gameStatus !== 'won'
  });

  // –í—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤—É–∫ –ø–µ—Ä–µ–º–æ–≥–∏ —Ç–∞ –ø—Ä–∏–∑—É–ø–∏–Ω–∏—Ç–∏ –º—É–∑–∏–∫—É
  useEffect(() => {
    if (gameState.gameStatus === 'won' && prevGameStatusRef.current !== 'won') {
      playSound('win');
      pauseMusic(); // –ó—É–ø–∏–Ω–∏—Ç–∏ –º—É–∑–∏–∫—É –ø—Ä–∏ –ø–µ—Ä–µ–º–æ–∑—ñ
      
      // –ó–±–µ—Ä–µ–≥—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤
      if (gameState.endTime && gameState.startTime) {
        const gameTime = (gameState.endTime - gameState.startTime) / 1000;
        addLeaderboardEntry(playerName || '–ê–Ω–æ–Ω—ñ–º', gameTime, gameState.moves);
        setSavedTime(gameTime);
      }
    }
    prevGameStatusRef.current = gameState.gameStatus;
  }, [gameState.gameStatus, gameState.endTime, gameState.startTime, gameState.moves, playSound, pauseMusic, playerName]);

  // –§—É–Ω–∫—Ü—ñ—è —Å—Ç–∞—Ä—Ç—É –≥—Ä–∏ –∑ –º—É–∑–∏–∫–æ—é
  const handleStartGame = useCallback(() => {
    setShowStartScreen(false);
    setShowNameInput(true); // –ü–æ–∫–∞–∑–∞—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ
  }, []);

  // –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ
  const handleNameSubmit = useCallback((name: string) => {
    setPlayerName(name);
    setShowNameInput(false);
    startMusic();
    playSound('start');
  }, [startMusic, playSound]);

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≥—Ä–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–∞–Ω—É –∞–±–æ —Ä–æ–∑–º—ñ—Ä—É canvas
  useEffect(() => {
    const canvasCtx = canvasCtxRef.current;
    if (!canvasCtx) return;
    
    const cellSize = calculateCellSize(
      canvasCtx.size.width,
      canvasCtx.size.height,
      gameState.mazeSize.width,
      gameState.mazeSize.height
    );
    
    renderGame(canvasCtx.ctx, gameState, cellSize);
  }, [gameState, canvasSize]);

  // –Ü–≥—Ä–æ–≤–∏–π —Ü–∏–∫–ª –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ–π (–ø–æ–∫–∏ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è, –∞–ª–µ –≥–æ—Ç–æ–≤–∏–π)
  useGameLoop({
    onUpdate: () => {
      // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∞–Ω—ñ–º–∞—Ü—ñ—ó, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    },
    enabled: gameState.gameStatus === 'playing',
    fps: 60
  });

  const handleCanvasReady = useCallback((context: CanvasContext) => {
    canvasCtxRef.current = context;
  }, []);

  const handleResize = useCallback((size: Size) => {
    if (canvasCtxRef.current) {
      canvasCtxRef.current = { ...canvasCtxRef.current, size };
      // –û–Ω–æ–≤–ª—é—î–º–æ state —â–æ–± —Ç—Ä–∏–≥–µ—Ä–Ω—É—Ç–∏ —Ä–µ—Ä–µ–Ω–¥–µ—Ä
      setCanvasSize(size);
    }
  }, []);

  return (
    <div style={{ 
      display: 'flex', 
      flexDirection: 'column', 
      alignItems: 'center', 
      padding: '10px',
      width: '100%',
      maxWidth: '900px',
      margin: '0 auto'
    }}>
      {showStartScreen ? (
        // –°—Ç–∞—Ä—Ç–æ–≤–∏–π –µ–∫—Ä–∞–Ω
        <div style={{
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
          justifyContent: 'center',
          minHeight: '70vh',
          textAlign: 'center',
          gap: '30px',
          width: '100%'
        }}>
          <h1 style={{ 
            fontSize: 'clamp(2rem, 8vw, 4rem)',
            color: 'white',
            WebkitBackgroundClip: 'text',
            backgroundClip: 'text',
            margin: 0,
            fontWeight: 'bold',
            textShadow: '2px 2px 4px rgba(0,0,0,0.1)'
          }}>
            üåü –õ–∞–±—ñ—Ä–∏–Ω—Ç–∏ –≤—ñ–¥ –ó–∞—Ö–∞—Ä–∞ üåü
          </h1>

          <div style={{
            fontSize: 'clamp(1rem, 3vw, 1.5rem)',
            color: '#fff',
            backgroundColor: 'rgba(0,0,0,0.5)',
            padding: '20px',
            borderRadius: '15px',
            maxWidth: '500px'
          }}>
            <p style={{ margin: '10px 0' }}>üéÆ –ó–Ω–∞–π–¥–∏ —à–ª—è—Ö —É –ª–∞–±—ñ—Ä–∏–Ω—Ç—ñ!</p>
            <p style={{ margin: '10px 0' }}>üéµ –ó –º—É–∑–∏–∫–æ—é —É —Å—Ç–∏–ª—ñ 90-—Ö</p>
            <p style={{ margin: '10px 0' }}>üïπÔ∏è –†–µ—Ç—Ä–æ 8-bit –∑–≤—É–∫–∏</p>
            <p style={{ margin: '10px 0' }}>üèÜ –¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤</p>
          </div>

          <button
            onClick={handleStartGame}
            style={{
              padding: '20px 50px',
              fontSize: 'clamp(1.2rem, 4vw, 2rem)',
              fontWeight: 'bold',
              background: 'linear-gradient(135deg, #f39c12 0%, #e67e22 100%)',
              color: 'white',
              border: 'none',
              borderRadius: '50px',
              cursor: 'pointer',
              boxShadow: '0 8px 16px rgba(0,0,0,0.3)',
              transition: 'all 0.3s ease',
              animation: 'pulse 2s infinite'
            }}
            onMouseEnter={(e) => {
              e.currentTarget.style.transform = 'scale(1.1)';
              e.currentTarget.style.boxShadow = '0 12px 24px rgba(0,0,0,0.4)';
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.transform = 'scale(1)';
              e.currentTarget.style.boxShadow = '0 8px 16px rgba(0,0,0,0.3)';
            }}
          >
            üéÆ –ü–û–ß–ê–¢–ò –ì–†–£! üé∂
          </button>

          <div style={{
            fontSize: 'clamp(0.9rem, 2.5vw, 1.1rem)',
            color: '#ddd',
            backgroundColor: 'rgba(0,0,0,0.3)',
            padding: '15px',
            borderRadius: '10px'
          }}>
            <p>‚å®Ô∏è –ö–µ—Ä—É–≤–∞–Ω–Ω—è: <strong>—Å—Ç—Ä—ñ–ª–∫–∏</strong> –∞–±–æ <strong>WASD</strong></p>
            <p>‚è∏Ô∏è <strong>ESC</strong> - –ø–∞—É–∑–∞ | üîÑ <strong>R</strong> - —Ä–µ—Å—Ç–∞—Ä—Ç</p>
          </div>

          {/* –¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤ –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É –µ–∫—Ä–∞–Ω—ñ */}
          <Leaderboard limit={10} />
        </div>
      ) : showNameInput ? (
        // –ï–∫—Ä–∞–Ω –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ
        <div style={{
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
          justifyContent: 'center',
          minHeight: '70vh',
          width: '100%'
        }}>
          <PlayerNameInput onSubmit={handleNameSubmit} />
        </div>
      ) : (
        // –ï–∫—Ä–∞–Ω –≥—Ä–∏
        <>
          <h1 style={{ 
            color: 'white',
            marginBottom: '15px', 
            fontSize: 'clamp(1.5rem, 5vw, 2.5rem)',
            textAlign: 'center'
          }}>
            üåü –õ–∞–±—ñ—Ä–∏–Ω—Ç–∏ –≤—ñ–¥ –ó–∞—Ö–∞—Ä–∞ üåü
          </h1>
          
          <GameStats gameState={gameState} />
          
          <GameCanvas
            width={width}
            height={height}
            onCanvasReady={handleCanvasReady}
            onResize={handleResize}
          />
          
          <GameControls
            onPause={handleTogglePause}
            onReset={handleReset}
            onMove={handleMove}
            isPaused={gameState.gameStatus === 'paused'}
            onToggleSound={toggleMute}
            isMuted={isMuted}
            onToggleMusic={toggleMusicMute}
            isMusicMuted={isMusicMuted}
          />
          
          <div style={{ 
            background: 'white',
            marginTop: '15px', 
            textAlign: 'center',
            color: 'rgb(221, 221, 221)',
            maxWidth: '600px',
            padding: '15px',
            fontSize: 'clamp(0.85rem, 2.5vw, 1rem)',
            backgroundColor: 'rgba(0, 0, 0, 0.3)',
            borderRadius: '10px',
          }}>
            <p><strong>–ö–µ—Ä—É–≤–∞–Ω–Ω—è:</strong></p>
            <p>‚å®Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ <strong>—Å—Ç—Ä—ñ–ª–∫–∏</strong> –∞–±–æ <strong>WASD</strong> –¥–ª—è —Ä—É—Ö—É</p>
            <p>‚è∏Ô∏è <strong>ESC</strong> - –ø–∞—É–∑–∞ | üîÑ <strong>R</strong> - —Ä–µ—Å—Ç–∞—Ä—Ç</p>
            <p>üéØ –ó–Ω–∞–π–¥—ñ—Ç—å –∑–µ–ª–µ–Ω–∏–π –∫–≤–∞–¥—Ä–∞—Ç (—Å—Ç–∞—Ä—Ç) —Ç–∞ –¥—ñ—Å—Ç–∞–Ω—å—Ç–µ—Å—è –¥–æ —á–µ—Ä–≤–æ–Ω–æ–≥–æ (—Ñ—ñ–Ω—ñ—à)!</p>
          </div>

          {/* –ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–º–æ–≥–∏ */}
          {gameState.gameStatus === 'won' && (
            <div style={{ marginTop: '30px', width: '100%' }}>
              <div style={{
                textAlign: 'center',
                fontSize: 'clamp(1.5rem, 5vw, 3rem)',
                color: '#f39c12',
                marginBottom: '20px',
                fontWeight: 'bold',
                textShadow: '2px 2px 4px rgba(0,0,0,0.2)'
              }}>
                üéâ –í–Ü–¢–ê–Ñ–ú–û, {playerName}! üéâ
              </div>
              <Leaderboard limit={10} currentPlayerTime={savedTime} />
            </div>
          )}
        </>
      )}
    </div>
  );
};